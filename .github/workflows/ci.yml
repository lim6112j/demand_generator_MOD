name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          uv sync --all-extras --dev

      - name: Lint with ruff
        run: |
          uv run ruff check .
          uv run ruff format --check .

      - name: Type check with mypy
        run: |
          uv run mypy . --ignore-missing-imports

      - name: Test with pytest
        run: |
          uv run pytest test_*.py -v --cov=. --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync

      - name: Test demand generator runs
        run: |
          timeout 10s uv run python main.py --duration 5 || test $? = 124

      - name: Validate configuration
        run: |
          uv run python -c "
          import yaml
          with open('config/demand_config.yaml', 'r') as f:
              config = yaml.safe_load(f)
          assert 'streaming' in config
          assert 'temporal_patterns' in config
          assert 'geographic' in config
          print('Configuration validation passed')
          "

      - name: Test JSON output format
        run: |
          timeout 5s uv run python main.py --duration 2 > output.json || test $? = 124
          uv run python -c "
          import json
          with open('output.json', 'r') as f:
              lines = f.readlines()
          for line in lines:
              if line.strip():
                  data = json.loads(line.strip())
                  assert 'id' in data
                  assert 'origin_stop_id' in data
                  assert 'destination_stop_id' in data
          print('JSON output validation passed')
          "

  security:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync

      - name: Run safety check
        run: |
          uv run safety check --json || true

      - name: Run bandit security linter
        run: |
          uv run bandit -r . -f json || true
